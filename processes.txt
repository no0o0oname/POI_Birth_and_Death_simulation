(* species s1 immigrates with rate r*) Immigration[s1_, r_] := 
Module[{Products = {{s1, x1}}, Reactants = {}, Catalysts = {}, listAll, function}, listAll = {Products, Reactants, Catalysts}; function[x1_] := r;
{listAll, function}];



(* species s1 produces species s1(itself) with kernel a *) 
Birth[s1_, a_] :=
Module[{Products = {{s1, x1}}, Reactants = {}, Catalysts = {{s1, x2}}, listAll, function},
listAll = {Products, Reactants, Catalysts}; function[x1_, x2_] := a[x1 - x2];
{listAll, function}];



(* s2 gives birth to s1 with kernel a *) 
BirthToAnotherType[s1_, s2_, a_] :=
Module[{Products = {{s1, x1}}, Reactants = {}, Catalysts = {{s2, x2}}, listAll, function},
listAll = {Products, Reactants, Catalysts}; function[x1_, x2_] := a[x1 - x2];
{listAll, function}];



(* species s1 produces species s1(itself) with kernel b, this is facilitted by species s3 with kernel a *) 
BirthByFacilitation[s1_, s3_, a_, b_] :=
Module[{Products = {{s1, x1}}, Reactants = {}, Catalysts = {{s1, x2}, {s3, x3}}, listAll, function},
listAll = {Products, Reactants, Catalysts}; function[x1_, x2_, x3_] := a[x3 - x2] b[x2 - x1]; {listAll, function}];



(* species s2 produces species s1 with kernel b, this is facilitated with by species s3 with kernel a *) 
BirthToAnotherTypeByFacilitation[s1_, s2_, s3_, a_, b_] :=
Module[{Products = {{s1, x1}}, Reactants = {}, Catalysts = {{s2, x2}, {s3, x3}}, listAll, function},
listAll = {Products, Reactants, Catalysts}; function[x1_, x2_, x3_] := a[x3 - x2] b[x2 - x1]; {listAll, function}];



(* species s1 dies with rate r*) 
DensityIndependentDeath[s1_, r_] :=
Module[{Products = {}, Reactants = {{s1, x1}},
Catalysts = {}, listAll, function}, listAll = {Products, Reactants, Catalysts};
function[x1_] := r; {listAll, function}];



(* species s1 eliminates species s1(itself) with kernel a*) 
DeathByCompetition[s1_, a_] := 
Module[{Products = {}, Reactants = {{s1, x1}}, 
Catalysts = {{s1, x2}}, listAll, function}, listAll = {Products, Reactants, Catalysts}; function[x1_, x2_] := a[x1 - x2];
{listAll, function}];



(* species s2 kills s1 by kernel a *) 
DeathByExternalFactor[s1_, s2_, a_] :=
Module[{Products = {}, Reactants = {{s1, x1}}, Catalysts = {{s2, x2}}, listAll, function},
listAll = {Products, Reactants, Catalysts}; function[x1_, x2_] := a[x1 - x2];
{listAll, function}];



(* s2 changes into s1 with rate r *) 
ChangeInType[s1_, s2_, r_] :=
Module[{Products = {{s1, x2}}, Reactants = {{s2, x2}},
Catalysts = {}, listAll, function}, listAll = {Products, Reactants, Catalysts};
function[x2_] := r; {listAll, function}];


(* s2 jumps with the kernel a, and s2 changes into s1. *)
 JumpAndChangeInType[s1_, s2_, a_] := 
Module[{Products = {{s1, x1}}, Reactants = {{s2, x2}}, Catalysts = {}, listAll, function}, listAll = {Products, Reactants, Catalysts}; function[x1_, x2_] := a[x1 - x2]; {listAll, function}];



(* s1 jumps with kernel a*)
Jump[s1_, a_] := 
Module[{Products = {{s1, x1}}, Reactants = {{s1, x2}},
Catalysts = {}, listAll, function}, listAll = {Products, Reactants, Catalysts}; function[x1_, x2_] := a[x1 - x2];
{listAll, function}];



(* s1 infects s2 with kernel a, s2 becomes infected and turns into s1 *) 
Infection[s1_, s2_, a_] := 
Module[{Products = {{s1, x2}}, Reactants = {{s2, x2}},
Catalysts = {{s1, x3}}, listAll, function}, listAll = {Products, Reactants, Catalysts}; function[x2_, x3_] := a[x2 - x3];
{listAll, function}];

(* s2 eats s3 with kernel a, s2 turns into s1 *) 
ChangeInTypeByConsumption[s1_, s2_, s3_, a_] :=
Module[{Products = {{s1, x2}}, Reactants = {{s2, x2}, {s3, x3}},
Catalysts = {}, listAll, function}, listAll = {Products, Reactants, Catalysts};
function[x2_, x3_] := a[x2 - x3]; {listAll, function}];



(* species s1 eats s2 with kernel a, s1 gives birth to s1 with kernel b *) 
BirthByConsumption[s1_, s2_, a_, b_] :=
Module[{Products = {{s1, x1}}, Reactants = {{s2, x2}}, Catalysts = {{s1, x3}}, listAll, function},
listAll = {Products, Reactants, Catalysts}; function[x1_, x2_, x3_] := a[x2 - x3] b[x1 - x3]; {listAll, function}];


(* species s3 eats s2 with the kernel a, s3 gives birth to s1 with the kernel b. *) 
BirthToAnotherTypeByConsumption[s1_, s2_, s3_, a_, b_] := 
Module[{Products = {{s1, x1}}, Reactants = {{s2, x2}}, Catalysts = {{s3, x3}}, listAll, function}, listAll = {Products, Reactants, Catalysts}; function[x1_, x2_, x3_] := a[x2 - x3] b[x1 - x3]; {listAll, function}];